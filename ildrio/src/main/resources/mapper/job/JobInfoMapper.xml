<?xml version="1.0" encoding="UTF-8"?> 
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
 
<mapper namespace="ilike.ildrio.mapper.job.JobInfoMapper">    
 

 	<select id="getListCount_jobInfo"  parameterType="ilike.ildrio.model.job.JobInfoModel"  resultType="java.lang.Integer"> 
		SELECT FOUND_ROWS() totRow
	</select> 
	 
	<select id="getList_jobInfo"  parameterType="ilike.ildrio.model.job.JobInfoModel" resultType="ilike.ildrio.model.job.JobInfoModel">  
		<![CDATA[   
		select	SQL_CALC_FOUND_ROWS  
			  jif.job_no   
			, jif.customer_id   
			
			, jif.job_title   
			, zfn_FormatDateKorean(jif.work_date) work_date_korean
			, jif.work_start_hour   
			, jif.work_start_minute   
			, jif.work_end_hour   
			, jif.work_end_minute   

			, jif.gender_type   
			, jif.min_age   
			, jif.max_age   
			, jif.daily_wage_info   
			, jif.tax_type   
			, jif.bring_things   
			, jif.job_detail   
			, jif.meal_provide_type  
			 
			, jif.workplace_postal_no   
			, substring_index(jif.workplace_postal_address,' ',2)  as workplace_postal_address
			, jif.workplace_detail_address   
			, jif.workplace_note   
			, jif.workplace_image   

			, jif.work_manager_name   
			, jif.work_manager_hpno   
			, jif.emergency_yn
			, jif.insert_datetime   
			, jif.update_datetime  
			, jif.notice_close_yn
			
			, mbr.business_name
				
			, DATEDIFF(DATE(NOW()), jif.work_date) AS work_date_diff 
			, case when ( DATEDIFF(DATE(NOW()), jif.work_date)>= 0  
			            or ifnull(jif.notice_close_yn,'N') = 'Y') then 'close'
			       else 'ing' end as job_notice_state     
			
			]]>
			<choose>
				<when test="selectMode == 'worker' ">  
					<![CDATA[   
					,( select  group_concat( 
						'<div class="row">',
							'<div class="col-7">',
								'<span  style="font-weight:bold;"> ',jmp.tech_code,' ',jmp.career_code, '</span>',
								'<span  style="margin-left:10px;background-color:#fff;border-radius:5px;padding:0px 5px;">',jmp.man_count, '명</span> ',
							'</div>',
							'<div class="col-5 text-end" style="color:#fd7e14;font-weight:bold;font-size:13pt;">',format(jmp.daily_wage,0),'원',
							'</div>',
						'</div>'
						ORDER BY jmp.daily_wage asc  
						SEPARATOR '' )
					from	job_manpower jmp
					where  jmp.job_no = jif.job_no
					) as manpower_list	
					]]>			
				</when>
				<otherwise>
					<![CDATA[   
					,( select  group_concat( 
						'<div class="row">',
							'<div class="col-7">',
								'<span  style="font-weight:bold;"> ',jmp.tech_code,' ',jmp.career_code, '</span>',
								'<span  style="margin-left:10px;background-color:#fff;border-radius:5px;padding:0px 5px;">',jmp.man_count, '명</span> ',
							'</div>',
							'<div class="col-5 text-end" style="color:#fd7e14;font-weight:bold;font-size:13pt;">',format(jmp.daily_wage,0),'원',
							'</div>',
						'</div>', 
						'<div class="row">',
							'<div class="col-12  text-end" style="color:#aaa;">',
								'<span>지원 :  ', 
											  ifnull(( select count(*)
											  from job_apply jap
											  where jap.manpower_no = jmp.manpower_no),0) ,'명</span> ',
								'<span style="margin-left:10px;">채용 : ', ifnull((select count(*)
											  from job_employment jep
											  where jep.manpower_no = jmp.manpower_no),0) ,'명</span> ',  
							'</div>',
						'</div>'
						
						ORDER BY jmp.daily_wage asc  
						SEPARATOR '' )
					from	job_manpower jmp
					where  jmp.job_no = jif.job_no
					) as manpower_list	
					]]>	
				</otherwise>
			</choose>
			
		from job_info jif
		join member_info mbr on mbr.member_id = jif.customer_id  
		<where>   
			<if test="selectMode == 'WORKER_APPLY' ">   
				and jif.job_no in ( select job_no from job_apply where member_id = #{memberId} )
			</if>
			<if test="selectMode == 'admin' ">   
				and mbr.manpower_company_id  = #{companyId}   
			</if>
			<if test="selectMode == 'customer' ">  
				and jif.customer_id = #{customerId}   
			</if>
			<if test="selectMode == 'main' ">   
			</if>
			
			<if test="jobTitle != null and jobTitle != '' ">   
				and ( jif.job_title  like concat('%',#{jobTitle},'%')   or
					jif.workplace_postal_address  like concat('%',#{jobTitle},'%')   or	
					jif.job_detail like concat('%',#{jobTitle},'%') )
				      
			</if>
			<if test="workDate != null and workDate != '' ">   
				and ( jif.work_date between #{workDate} and #{workDate} )  
			</if>   
			<if test="srhFromWorkDate != null and srhFromWorkDate != '' ">   
				<if test="srhToWorkDate != null and srhToWorkDate != '' ">   
					and ( jif.work_date between #{srhFromWorkDate} and #{srhToWorkDate} )  
				</if>   
			</if>   
			<if test="jobStateCode != null and jobStateCode != '' ">   
				and jif.job_state_code  like concat('%',#{jobStateCode},'%')   
			</if>   
			<if test="genderType != null and genderType != '' ">   
				and jif.gender_type = #{genderType}   
			</if>   
			<if test="workplacePostalAddress != null and workplacePostalAddress != '' ">   
				and jif.workplace_postal_address  like concat('%',#{workplacePostalAddress},'%')   
			</if>   
			<if test="workManagerName != null and workManagerName != '' ">   
				and jif.work_manager_name  like concat('%',#{workManagerName},'%')   
			</if>   
			<if test="workManagerHpno != null and workManagerHpno != '' ">   
				and jif.work_manager_hpno  like concat('%',#{workManagerHpno},'%')   
			</if>   
			<if test="jobDetail != null and jobDetail != '' ">   
				and jif.job_detail  like concat('%',#{jobDetail},'%')   
			</if>   
			<if test="applyLimitHour != null and applyLimitHour != '' ">   
				and jif.apply_limit_hour = #{applyLimitHour}   
			</if>  
			<if test="techCode != null and techCode != '' ">   
				and jif.job_no in ( select 	job_no 
									from 	job_manpower jmp
									where	tech_code like concat('%',#{techCode},'%') )  
			</if>
			<if test="careerCode != null and careerCode != '' ">   
				and jif.job_no in ( select 	job_no 
									from 	job_manpower jmp
									where	career_code like concat('%',#{careerCode},'%') )  
			</if> 
			<if test="jobNoticeState == 'ing' ">   
				and ifnull(jif.notice_close_yn,'N') = 'N'
				and		DATEDIFF(DATE(NOW()), jif.work_date) &lt; 0
			</if>  
			<if test="jobNoticeState == 'close' ">   
				and ( ifnull(jif.notice_close_yn,'N') = 'Y'
					or	DATEDIFF(DATE(NOW()), jif.work_date) &gt;= 0 )
			</if>   
		</where>
		<if test="selectMode == 'HOT' ">   
			having  work_date_diff = '1'
		</if>   
		
		
		<if test="srhOrderBy != null and  srhOrderBy != '' ">   
			order by 	${srhOrderBy} ${srhOrderAsc}   
		</if>   
		limit ${startRow} , ${pageRow}    
	</select>  
 
	<select id="subList_jobInfo"  parameterType="ilike.ildrio.model.job.JobInfoModel" resultType="ilike.ildrio.model.job.JobInfoModel">  
	</select>  
 
	<select id="getMap_jobInfo"  parameterType="ilike.ildrio.model.job.JobInfoModel" resultType="ilike.ildrio.model.job.JobInfoModel">  
		<![CDATA[   
		select  
			 jif.job_no  
			, jif.customer_id  
			, jif.job_title  
			, jif.work_date  
			, jif.job_state_code  
			, jif.tax_employment_yn   
			, jif.tax_withholding_yn   
			, jif.tax_charge_yn   
			, jif.gender_type  
			, jif.min_age  
			, jif.max_age  
			, jif.holiday_note  
			, jif.meal_provide_type  
			, jif.work_start_hour  
			, jif.work_start_minute  
			, jif.work_end_hour  
			, jif.work_end_minute  
			, jif.bring_things  
			, jif.workplace_company_name  
			, jif.workplace_postal_no  
			, jif.workplace_postal_address  
			, jif.workplace_detail_address  
			, jif.workplace_note  
			, jif.workplace_image  
			, jif.work_manager_name  
			, jif.work_manager_hpno  
			, jif.job_detail  
			, jif.apply_limit_hour  
			, jif.admin_memo  
			, jif.emergency_yn  
			, jif.notice_close_yn  
			, jif.insert_datetime  
			, jif.update_datetime 
			
			, zfn_FormatDateKorean(jif.work_date) work_date_korean
			, cui.business_name
			
		from  job_info jif
		left join  member_info cui on cui.member_id = jif.customer_id  
		where jif.job_no = #{jobNo}  
		
	 	]]> 
	</select>  
 
	<select id="getCount_jobInfo"  parameterType="ilike.ildrio.model.job.JobInfoModel"  resultType="java.lang.Integer">  
		<![CDATA[   
		select 	count(*) count  
		from 	job_info  
		where job_no = #{jobNo}  
	 	]]> 
	</select>  
 
	<update id="insert_jobInfo"  parameterType="ilike.ildrio.model.job.JobInfoModel">  
		<![CDATA[   
		insert into job_info (  
			 job_no   
			, customer_id   
			
			, job_title   
			, work_date   
			, work_start_hour   
			, work_start_minute   
			, work_end_hour   
			, work_end_minute   
			, gender_type   
			, min_age   
			, max_age   
			, tax_employment_yn   
			, tax_withholding_yn   
			, tax_charge_yn   
			, bring_things   
			, job_detail   
			, meal_provide_type  
			 
			, workplace_postal_no   
			, workplace_postal_address   
			, workplace_detail_address   
			, workplace_note   
			, workplace_image   

			, work_manager_name   
			, work_manager_hpno   
			, emergency_yn
			
			, insert_datetime   
			, update_datetime   
	 	) values (  
			 #{jobNo}   
			, #{customerId}   
			
			, #{jobTitle}   
			, #{workDate}   
			, #{workStartHour}   
			, #{workStartMinute}   
			, #{workEndHour}   
			, #{workEndMinute}   

			, #{genderType}   
			, #{minAge}   
			, #{maxAge}   
			, #{taxEmploymentYn}   
			, #{taxWithholdingYn}   
			, #{taxChargeYn}   
			, #{bringThings}   
			, #{jobDetail}   
			, #{ealProvideType}  
			 
			, #{workplacePostalNo}   
			, #{workplacePostalAddress}   
			, #{workplaceDetailAddress}   
			, #{workplaceNote}   
			, #{workplaceImage}   

			, #{workManagerName}   
			, #{workManagerHpno}   
			, #{emergencyYn}
			, now()  
			, now()  
	 	)   
	 	]]> 
	</update>  
 
	<update id="update_jobInfo"  parameterType="ilike.ildrio.model.job.JobInfoModel">  
		<choose>   
			<when test=" trxnMode == 'list_update' ">   
				<![CDATA[   
				update job_info set  
					 update_datetime = now()  
				where job_no = #{jobNo}  
	 			]]> 
			</when>   
			<otherwise>   
				<![CDATA[   
				update job_info set  
					 job_title = #{jobTitle}  
					, work_date = #{workDate} 
					, work_start_hour = #{workStartHour}  
					, work_start_minute = #{workStartMinute}  
					, work_end_hour = #{workEndHour}  
					, work_end_minute = #{workEndMinute}  
					, gender_type = #{genderType}  
					, min_age = replace(#{minAge},',','')  
					, max_age = replace(#{maxAge},',','')  
					, daily_wage_info = #{dailyWageInfo}  
					, tax_employment_yn  = #{taxEmploymentYn}   
					, tax_withholding_yn  = #{taxWithholdingYn}   
					, tax_charge_yn   = #{taxChargeYn}  
					, actual_salary_amount  = replace(#{actualSalaryAmount},',','')     
					, bring_things = #{bringThings}  
					, job_detail = #{jobDetail}  
					, meal_provide_type = #{ealProvideType}  

					, workplace_postal_no = #{workplacePostalNo}  
					, workplace_postal_address = #{workplacePostalAddress}  
					, workplace_detail_address = #{workplaceDetailAddress}  
					, workplace_note = #{workplaceNote}  
					, workplace_image = #{workplaceImage}  
					
					, work_manager_name = #{workManagerName}  
					, work_manager_hpno = #{workManagerHpno}  
					
					, emergency_yn = #{emergencyYn}  
					, notice_close_yn = #{noticeCloseYn}  
					
					, job_state_code = #{jobStateCode} 
					
					, update_datetime = now()  
				where job_no = #{jobNo}  
	 			]]> 
			</otherwise>   
		</choose>   
	</update>  
 
	<update id="delete_jobInfo"  parameterType="ilike.ildrio.model.job.JobInfoModel">  
		<![CDATA[   
		delete from job_info   
		where job_no = #{jobNo}  
	 	]]> 
	</update>  
	
	<update id="insert_copy_jobInfo"  parameterType="ilike.ildrio.model.job.JobInfoModel">  
		<![CDATA[   
		insert into job_info (  
			 job_no   
			, customer_id   
			
			, job_title   
			, work_date   
			, work_start_hour   
			, work_start_minute   
			, work_end_hour   
			, work_end_minute   
			, gender_type   
			, min_age   
			, max_age   
			, tax_employment_yn   
			, tax_withholding_yn   
			, tax_charge_yn   
			, bring_things   
			, job_detail   
			, meal_provide_type  
			 
			, workplace_postal_no   
			, workplace_postal_address   
			, workplace_detail_address   
			, workplace_note   
			, workplace_image   

			, work_manager_name   
			, work_manager_hpno   
			, emergency_yn
			
			, job_state_code
			, insert_datetime   
			, update_datetime   
	 	)
	 	select
	 		#{newJobNo} as job_no   
			, customer_id   
			
			, job_title   
			, date_add(work_date, INTERVAL 1 DAY) work_date   
			, work_start_hour   
			, work_start_minute   
			, work_end_hour   
			, work_end_minute   
			, gender_type   
			, min_age   
			, max_age   
			, tax_employment_yn   
			, tax_withholding_yn   
			, tax_charge_yn   
			, bring_things   
			, job_detail   
			, meal_provide_type  
			 
			, workplace_postal_no   
			, workplace_postal_address   
			, workplace_detail_address   
			, workplace_note   
			, workplace_image   

			, work_manager_name   
			, work_manager_hpno   
			, emergency_yn
			
			, 'TEMP' as job_state_code
			, now()  
			, now()   
	 	from   	job_info
	 	where	job_no = #{jobNo} 
	 	]]> 
	</update>
 
</mapper>