<?xml version="1.0" encoding="UTF-8"?> 
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
 
<mapper namespace="ilike.ildrio.mapper.employment.EmploymentPaymentMapper">    
 
 
 
	<select id="getListCount_employmentPayment"  parameterType="ilike.ildrio.model.employment.EmploymentPaymentModel"  resultType="java.lang.Integer"> 
		SELECT FOUND_ROWS() totRow
	</select> 
	 
	<select id="getList_employmentPayment"  parameterType="ilike.ildrio.model.employment.EmploymentPaymentModel" resultType="ilike.ildrio.model.employment.EmploymentPaymentModel">  
		<![CDATA[   
		select	SQL_CALC_FOUND_ROWS  
			 epy.job_no  
			, epy.member_no  
			, epy.payment_base_date  
			, epy.work_start_date  
			, epy.daily_work_wage  
			, epy.daily_commison  
			, epy.daily_request_wage  
			, epy.work_day_count  
			, epy.payment_amount  
			, epy.tax_amount  
			, epy.tax_memo  
			, epy.payment_date  
			, epy.payment_status  
			, epy.bank_name  
			, epy.bank_account_no  
			, epy.bank_account_name  
			, epy.insert_datetime  
			, epy.update_datetime  
		from employment_payment epy
	 	]]> 
		<where>   
			<if test="jobNo != null and jobNo != '' ">   
				and epy.job_no  like concat('%',#{jobNo},'%')   
			</if>   
			<if test="memberNo != null and memberNo != '' ">   
				and epy.member_no  like concat('%',#{memberNo},'%')   
			</if>   
			<if test="srhFromPaymentBaseDate != null and srhFromPaymentBaseDate != '' ">   
				<if test="srhToPaymentBaseDate != null and srhToPaymentBaseDate != '' ">   
					and ( epy.payment_base_date between #{srhFromPaymentBaseDate} and #{srhToPaymentBaseDate} )  
				</if>   
			</if>   
		</where>   
		<if test="srhOrderBy != null and  srhOrderBy != '' ">   
			order by 	${srhOrderBy} ${srhOrderAsc}   
		</if>   
		limit ${startRow} , ${pageRow}    
	</select>  
 
	<select id="subList_employmentPayment"  parameterType="ilike.ildrio.model.employment.EmploymentPaymentModel" resultType="ilike.ildrio.model.employment.EmploymentPaymentModel">  
	</select>  
 
	<select id="getMap_employmentPayment"  parameterType="ilike.ildrio.model.employment.EmploymentPaymentModel" resultType="ilike.ildrio.model.employment.EmploymentPaymentModel">  
		<![CDATA[   
		select  
			 epy.job_no  
			, epy.member_no  
			, epy.payment_base_date  
			, epy.work_start_date  
			, epy.daily_work_wage  
			, epy.daily_commison  
			, epy.daily_request_wage  
			, epy.work_day_count  
			, epy.payment_amount  
			, epy.tax_amount  
			, epy.tax_memo  
			, epy.payment_date  
			, epy.payment_status  
			, epy.bank_name  
			, epy.bank_account_no  
			, epy.bank_account_name  
			, epy.insert_datetime  
			, epy.update_datetime  
		from employment_payment epy
		where epy.job_no = #{jobNo}  
		and epy.member_no = #{memberNo}  
		and epy.payment_base_date = #{paymentBaseDate}  
	 	]]> 
	</select>  
 
	<select id="getCount_employmentPayment"  parameterType="ilike.ildrio.model.employment.EmploymentPaymentModel"  resultType="java.lang.Integer">  
		<![CDATA[   
		select 	count(*) count  
		from 	employment_payment  
		where job_no = #{jobNo}  
		and member_no = #{memberNo}  
		and payment_base_date = #{paymentBaseDate}  
	 	]]> 
	</select>  
 
	<update id="insert_employmentPayment"  parameterType="ilike.ildrio.model.employment.EmploymentPaymentModel">  
		<![CDATA[   
		insert into employment_payment (  
			 job_no   
			, member_no   
			, payment_base_date   
			, work_start_date   
			, daily_work_wage   
			, daily_commison   
			, daily_request_wage   
			, work_day_count   
			, payment_amount   
			, tax_amount   
			, tax_memo   
			, payment_date   
			, payment_status   
			, bank_name   
			, bank_account_no   
			, bank_account_name   
			, insert_datetime   
			, update_datetime   
	 	) values (  
			 #{jobNo}  
			, #{memberNo}  
			, #{paymentBaseDate}  
			, #{workStartDate}  
			, replace(#{dailyWorkWage},',','')  
			, replace(#{dailyCommison},',','')  
			, replace(#{dailyRequestWage},',','')  
			, replace(#{workDayCount},',','')  
			, replace(#{paymentAmount},',','')  
			, replace(#{taxAmount},',','')  
			, #{taxMemo}  
			, #{paymentDate}  
			, #{paymentStatus}  
			, #{bankName}  
			, #{bankAccountNo}  
			, #{bankAccountName}  
			, now()  
			, now()  
	 	)   
	 	]]> 
	</update>  
 
	<update id="update_employmentPayment"  parameterType="ilike.ildrio.model.employment.EmploymentPaymentModel">  
		<choose>   
			<when test=" trxnMode == 'list_update' ">   
				<![CDATA[   
				update employment_payment set  
					 update_datetime = now()  
				where job_no = #{jobNo}  
				and member_no = #{memberNo}  
				and payment_base_date = #{paymentBaseDate}  
	 			]]> 
			</when>   
			<otherwise>   
				<![CDATA[   
				update employment_payment set  
					 work_start_date = #{workStartDate}  
					, daily_work_wage = replace(#{dailyWorkWage},',','')  
					, daily_commison = replace(#{dailyCommison},',','')  
					, daily_request_wage = replace(#{dailyRequestWage},',','')  
					, work_day_count = replace(#{workDayCount},',','')  
					, payment_amount = replace(#{paymentAmount},',','')  
					, tax_amount = replace(#{taxAmount},',','')  
					, tax_memo = #{taxMemo}  
					, payment_date = #{paymentDate}  
					, payment_status = #{paymentStatus}  
					, bank_name = #{bankName}  
					, bank_account_no = #{bankAccountNo}  
					, bank_account_name = #{bankAccountName}  
					, update_datetime = now()  
				where job_no = #{jobNo}  
				and member_no = #{memberNo}  
				and payment_base_date = #{paymentBaseDate}  
	 			]]> 
			</otherwise>   
		</choose>   
	</update>  
 
	<update id="delete_employmentPayment"  parameterType="ilike.ildrio.model.employment.EmploymentPaymentModel">  
		<![CDATA[   
		delete from employment_payment   
		where job_no = #{jobNo}  
		and member_no = #{memberNo}  
		and payment_base_date = #{paymentBaseDate}  
	 	]]> 
	</update>  
 
</mapper>